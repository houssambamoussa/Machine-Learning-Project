# -*- coding: utf-8 -*-
"""Untitled26.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SW0BmrzAbn5hdu6yx3YxBshBpnFp4fUV
"""

import requests

standings_url = "https://fbref.com/en/comps/70/Saudi-Professional-League-Stats"

data = requests.get(standings_url)

from bs4 import BeautifulSoup

soup = BeautifulSoup(data.text)
standings_table = soup.select('table.stats_table')[0]
links = standings_table.find_all('a')
links = [l.get("href") for l in links]
links = [l for l in links if '/squads/' in l]

team_urls = [f"https://fbref.com{l}" for l in links]

data = requests.get(team_urls[0])

import pandas as pd
matches = pd.read_html(data.text, match="Scores & Fixtures")[0]

soup = BeautifulSoup(data.text)
links = soup.find_all('a')
links = [l.get("href") for l in links]
links = [l for l in links if l and 'all_comps/shooting/' in l]

data = requests.get(f"https://fbref.com{links[0]}")

shooting = pd.read_html(data.text, match="Shooting")[0]

shooting.head()

shooting.columns = shooting.columns.droplevel()

team_data = matches.merge(shooting[["Date", "Sh", "SoT", "Dist","PK", "PKatt"]], on="Date")

team_data.head()

years = list(range(2024, 2022, -1))
all_matches = []

standings_url = "https://fbref.com/en/comps/70/Saudi-Professional-League-Stats"

import time
for year in years:
    data = requests.get(standings_url)
    soup = BeautifulSoup(data.text)
    standings_table = soup.select('table.stats_table')[0]

    links = [l.get("href") for l in standings_table.find_all('a')]
    links = [l for l in links if '/squads/' in l]
    team_urls = [f"https://fbref.com{l}" for l in links]

    previous_season = soup.select("a.prev")[0].get("href")
    standings_url = f"https://fbref.com{previous_season}"

    for team_url in team_urls:
        team_name = team_url.split("/")[-1].replace("-Stats", "").replace("-", " ")
        data = requests.get(team_url)
        matches = pd.read_html(data.text, match="Scores & Fixtures")[0]
        soup = BeautifulSoup(data.text)
        links = [l.get("href") for l in soup.find_all('a')]
        links = [l for l in links if l and 'all_comps/shooting/' in l]
        data = requests.get(f"https://fbref.com{links[0]}")
        shooting = pd.read_html(data.text, match="Shooting")[0]
        shooting.columns = shooting.columns.droplevel()
        try:
            team_data = matches.merge(shooting[["Date", "Sh", "SoT", "Dist",  "PK", "PKatt"]], on="Date")
        except ValueError:
            continue

        team_data["Season"] = year
        team_data["Team"] = team_name
        all_matches.append(team_data)
        time.sleep(4)

len(all_matches)

all_matches

match_df = pd.concat(all_matches)

match_df

match_df.columns = [c.lower() for c in match_df.columns]

match_df.to_csv("matches1.csv")

from google.colab import files

# Assuming your DataFrame is named match_df
match_df.to_csv("matches1.csv", index=False)

# Download the CSV file
files.download("matches1.csv")

import pandas as pd
matches = pd.read_csv("matches.csv")

matches.head()

matches.shape

# 1 seasons * 18 squads  * 34 matches / 1 seansons 16 squads 30 match
34 *18 + 16*30

matches["team"].value_counts()

matches["date"].value_counts()

matches["round"].value_counts()

matches.dtypes

matches["date"] = pd.to_datetime(matches["date"])

matches["venue_code"] = matches["venue"].astype("category").cat.codes

matches["opp_code"] = matches["opponent"].astype("category").cat.codes

matches["day_code"] = matches["date"].dt.dayofweek

matches["hour"] = matches["time"].str.replace(":.+", "", regex=True).astype("int")
matches["target"] = (matches["result"] == "W").astype("int")

matches

opp_codes_by_team = matches.groupby("opponent")["opp_code"].unique()

# Affichage des codes pour chaque Ã©quipe
for team, codes in opp_codes_by_team.items():
    print(f"Opponent: {team}, Opponent Codes: {', '.join(map(str, codes))}")

from sklearn.ensemble import RandomForestClassifier

rf = RandomForestClassifier(n_estimators=50, min_samples_split=10, random_state=1)

predictors = ["venue_code", "opp_code", "hour"]

train = matches[matches["date"] < '2024-2-01']
test =  matches[matches["date"] < '2024-2-01']

rf.fit(train[predictors], train["target"])

preds = rf.predict(test[predictors])

from sklearn.metrics import accuracy_score
error = accuracy_score(test["target"], preds)

error

combined = pd.DataFrame(dict(actual=test["target"], predicted=preds))

from sklearn.metrics import precision_score

precision_score(test["target"], preds)

combined = pd.DataFrame(dict(actual=test["target"], predicted=preds), index=test.index)

error = precision_score(test["target"], preds)

grouped_matches = matches.groupby("team")

group = grouped_matches.get_group("Al Nassr").sort_values("date")

group

combined = combined.merge(group[["date", "team", "opponent", "result"]], left_index=True, right_index=True)

combined