# -*- coding: utf-8 -*-
"""Untitled31.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ax-3Db9lLpgEUCDaLF-QtUBvaKI39ti8
"""

import pandas as pd
import yfinance as yf
from datetime import date, timedelta
import matplotlib.pyplot as plt

today = date.today()
d1 = today.strftime("%Y-%m-%d")
end_date = d1
d2 = date.today() - timedelta(days=365)
d2 = d2.strftime("%Y-%m-%d")
start_date = d2

data = yf.download('TSLA', start=start_date, end=end_date, progress=False)
data["Date"] = data.index
data = data[["Date", "Open", "High", "Low", "Close", "Adj Close", "Volume"]]
data.reset_index(drop=True, inplace=True)
print(data.tail())

print(data.tail())

data = data[["Date", "Close"]]
print(data.head())

plt.style.use('fivethirtyeight')
plt.figure(figsize=(15, 10))
plt.plot(data["Date"], data["Close"])
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.seasonal import seasonal_decompose



result = seasonal_decompose(data["Close"], model='multiplicative', period=30)

result.plot()


plt.gcf().set_size_inches(15, 10)

plt.show()

pd.plotting.autocorrelation_plot(data["Close"])
plt.show()
from statsmodels.graphics.tsaplots import plot_pacf
plot_pacf(data["Close"], lags = 100)
plt.show()

train_data = data['Close'][:-15]
test_data = data['Close'][-15:]
print(train_data)
print(test_data)

# Définition des valeurs p, d, q
p, d, q = 6, 1, 6

from statsmodels.tsa.arima.model import ARIMA
model_A = ARIMA(train_data, order=(p,d,q))
fitted_A = model_A.fit()
# Affichage du résumé du modèle
print(fitted_A.summary())

test_pred_A = fitted_A.predict(start=test_data.index[0], end=test_data.index[-1])
df_A = pd.DataFrame({"test_data": test_data, "test_pred_ARIMA": test_pred_A})
print(df_A)
print(test_pred_A)

df_A = pd.DataFrame({"test_data": test_data, "test_pred_ARIMA": test_pred_A})
print(df_A)

plt.figure(figsize=(10, 6))
plt.plot(train_data.index, train_data.values, label='Ensemble d\'entraînement', color='blue')
plt.plot(test_data.index, test_data.values, label='Ensemble de test (réel)', color='blue', linestyle='--')
plt.plot(test_pred_A.index, test_pred_A, label='Prédictions (Test)', color='red')

import statsmodels.api as sm
import warnings
warnings.filterwarnings('ignore')
model_S = sm.tsa.statespace.SARIMAX(data['Close'], order=(p, d, q), seasonal_order=(p, d, q, 12))
fitted_S = model_S.fit()
print(fitted_S.summary())

test_pred_S = fitted_S.predict(start=test_data.index[0], end=test_data.index[-1])
df_S = pd.DataFrame({"test_data": test_data, "test_pred": test_pred_S})
# Affichage du DataFrame
print(df_S)
print(test_pred_S)

df_S = pd.DataFrame({"test_data": test_data, "test_pred": test_pred_S})
# Affichage du DataFrame
print(df_S)

# Tracer les prédictions et les données réelles avec les courbes collées
plt.figure(figsize=(10, 6))
plt.plot(train_data.index, train_data.values, label='Ensemble d\'entraînement', color='blue')
plt.plot(test_data.index, test_data.values, label='Ensemble de test (réel)', color='blue', linestyle='--')
plt.plot(test_pred_S.index, test_pred_S, label='Prédictions (Test)', color='red')

# Prédiction de stock des 20 prochains jours
prediction_20_jours = fitted_S.predict(len(data), len(data)+20)
print(prediction_20_jours)

# Graphe de prédiction de stock des 20 prochains jours
data["Close"].plot(legend=True, label="Training Data", figsize=(15, 10))
prediction_20_jours.plot(legend=True, label="Predictions_20_jours")
plt.show()

from joblib import dump
# Sauvegarde du modèle ARIMA
dump(fitted_A, 'ARIMA.joblib')
# Sauvegarde du modèle SARIMA
dump(fitted_S, 'SARIMA.joblib')